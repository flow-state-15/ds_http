import type {
  BoundServer,
  BunServer,
  DSRequest,
  DSResponse,
  GetHandler,
  HandlerTables,
  ServerOptions,
  ServerRef,
} from "../server";

export function sayHi() {
  console.log("hello from utils!");
}

export function forwardReq(R: Request, handlerTables: HandlerTables): Response {
  //!! method routing here
  //!! get handlers are passed object extending Response with send method
  console.log("req: ", R);
  const DSRequest: DSRequest = R;
  const DSResponse: DSResponse = {
    send,
  };

  let handler;
  if (R.method == "GET" || R.method == "POST") {
    handler = handlerTables[R.method][R.url]
  }

  if(!handler) throw new Error("No request handler provided!")

  handler(DSRequest, DSResponse);

  //!! Response should be generated by DSRes.send() not from handler
  
  let res = new Response(); // placeholder for now
  return res;
}

export function createServerRef(options?: ServerOptions): ServerRef {
  const handlerTables: HandlerTables = {
    "GET": {},
    "POST": {},
  };

  const serverRef = Bun.serve({
    port: options?.port,
    fetch: (R: Request) => forwardReq(R, handlerTables),
  });

  const server: BoundServer = {
    get: (string, handler) => {},
    post: (string, handler) => {},
    start: () => {},
    kill: () => {},
  };

  return function () {
    return server;
  };
}

function send(args: [BodyInit?, ResponseInit?]) {
  if (!args.length) {
    throw new Error("'send' needs Response args.");
  }
  return new Response(...args);
}
