import { serve, type Server } from "bun";
import type {
  BoundServer,
  BunServer,
  DSRequest,
  DSResponse,
  GetHandler,
  HandlerTables,
  PostHandler,
  ServerOptions,
  ServerRef,
} from "../types";

export function sayHi() {
  console.log("hello from utils!");
}

export function forwardReq(R: Request, server: BunServer, handlerTables: HandlerTables): Response {
  //!! method routing here
  //!! get handlers are passed object extending Response with send method
  console.log("req: ", R);
  console.log("handler tables: ", handlerTables);
  const DSRequest: DSRequest = R;
  const DSResponse: DSResponse = {
    send,
    closed: false,
    response: null,
  };

  let handler;
  if (R.method == "GET" || R.method == "POST") {
    //!! TODO slice after tld
    // TODO const route = parseRoute(R.url) // TODO
    handler = handlerTables[R.method]["/"]; // use [route]
  }
  console.log("handler: ", handler);
  if (!handler || !handler.length) throw new Error("No request handler provided!");

  for (let i = 0; i < handler.length; i++) {
    handler[i] && handler[i]!(DSRequest, DSResponse); // cleanup assertion
  }

  // Response should be generated by DSRes.send() not from handler
  if (!DSResponse.closed || !DSResponse.response) {
    console.log("DSResponse: ", DSResponse);
    throw new Error("Request connection not closed in handlers.");
  }
  return DSResponse.response;
}

export function createServerRef(options?: ServerOptions): ServerRef {
  const handlerTables: HandlerTables = {
    GET: {},
    POST: {},
  };

  let serverRef: null | Server = null;

  const server: BoundServer = {
    get: (route: string, ...handlers: GetHandler[]) => {
      console.log("get method called: route, handlers", route, handlers);
      if (typeof route !== "string" || !handlers.length)
        throw new Error("GET handler misconfigured.");
      handlerTables.GET[route] = Array.from(handlers);
    },
    post: (route: string, ...handlers: PostHandler[]) => {
      if (typeof route !== "string" || !handlers.length)
        throw new Error("GET handler misconfigured.");
      handlerTables.POST[route] = handlers;
    },
    listen: (port, fn) => {
      if (typeof options === "object" || options === undefined) {
        serverRef = serve({
          fetch: (R: Request, server: BunServer) => forwardReq(R, server, handlerTables),
          ...options,
          port,
        });
        // console.log("serverRef: ", serverRef)
      } else {
        throw new Error("Server options argument invalid.");
      }
      if (typeof fn === "function") fn();
    },
    kill: () => {
      if (!serverRef) throw new Error("No server to kill.");
      else serverRef.stop();
    },
  };

  return function () {
    return server;
  };
}

function send(this: DSResponse, ...args: [BodyInit?, ResponseInit?]) {
  if (!args.length) {
    throw new Error("'send' needs Response args.");
  }
  this.closed = true;
  this.response = new Response(...args);
}
